rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    function adminOnly() {
      return request.auth != null && request.auth.token.email == "gsbenevides2@gmail.com";
    }
    function getPostFile(postId) {
      return adminOnly() || (firestore.get(/databases/(default)/documents/posts/$(postId)).data.visible == true);
    }
    function getStorageFile(storageId) {
      let isAllowedUser = request.auth.token.email in firestore.get(/databases/(default)/documents/storage/$(storageId)).data.allowedUsers;
      let isAdminUser = adminOnly();
      let isVisible = firestore.get(/databases/(default)/documents/storage/$(storageId)).data.visible == true;

      return isAdminUser || isVisible || isAllowedUser;
    }
    match /{allPaths=**} {
      allow read, write: if false;
    }
    match /certifications/{allPaths=**} {
    	allow read: if true;
      allow write: if adminOnly();
    }
    match /projects/{allPaths=**} {
    	allow read: if true;
      allow write: if adminOnly();
    }
    match /posts/{allPaths=**} {
    	allow read: if adminOnly();
      allow write: if adminOnly();
    }
    match /posts/{postId}/{allPaths=**} {
    	allow read: if getPostFile(postId);
      allow write: if adminOnly();
    }
    match /storage/{allPaths=**} {
    	allow read: if adminOnly();
      allow write: if adminOnly();
    }
    match /storage/{fileId}/{allPaths=**} {
    	allow read: if getStorageFile(fileId);
      allow write: if adminOnly();
    }
  }
}